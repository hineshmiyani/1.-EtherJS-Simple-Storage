import { ContractFactory, ethers } from "ethers";
import fs from "fs";
import "dotenv/config";

async function main() {
  // Compile them in our code
  // Compile them in separately
  // http://127.0.0.1:7545

  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

  /******** Better Private Key Management ********/
  // const encryptedJSON = fs.readFileSync("./.encryptedKey.json", "utf8");
  // let wallet = new ethers.Wallet.fromEncryptedJsonSync(encryptedJSON, process.env.PRIVATE_KEY_PASSWORD);
  // wallet = await wallet.connect(provider);

  // abi = Application Binary Interface
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");

  // Bianary file
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );

  // Contract Factory
  const contractFactory = new ContractFactory(abi, binary, wallet);
  console.log("Deploying please wait...");
  const contract = await contractFactory.deploy();

  /******** Transaction Receipts ********/
  // const transectionReceipt = await contract.deployTransaction.wait(1);
  await contract.deployTransaction.wait(1);
  console.log("Contract Address : ", contract.address);

  // console.log(
  //   "Here is the deployment transection (transection response) : ",
  //   contract.deployTransaction
  // );
  // console.log("Here is an transection receipt : ", transectionReceipt);

  /******** Sending a "raw" transection in etherjs ********/
  // console.log("let's deploy with only transection data!");
  // const nonce = await wallet.getTransactionCount();
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: 20000000000,
  //   gasLimit: 1000000,
  //   to: null,
  //   value: 0,
  //   data: "0x60806040526040518060400160405280600281526020016040518060400160405280600681526020017f48696e6573680000000000000000000000000000000000000000000000000000815250815250600160008201518160000155602082015181600101908051906020019061007792919061008c565b50505034801561008657600080fd5b50610190565b8280546100989061012f565b90600052602060002090601f0160209004810192826100ba5760008555610101565b82601f106100d357805160ff1916838001178555610101565b82800160010185558215610101579182015b828111156101005782518255916020019190600101906100e5565b5b50905061010e9190610112565b5090565b5b8082111561012b576000816000905550600101610113565b5090565b6000600282049050600182168061014757607f821691505b6020821081141561015b5761015a610161565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6108778061019f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636057361d1161005b5780636057361d146100ee57806377ec2b551461010a578063795fff1d146101295780639e7a13ad146101455761007d565b80632e64cec1146100825780633d358625146100a05780634f2be91f146100d0575b600080fd5b61008a610176565b6040516100979190610630565b60405180910390f35b6100ba60048036038101906100b591906104ce565b61017f565b6040516100c79190610630565b60405180910390f35b6100d86101ad565b6040516100e59190610630565b60405180910390f35b61010860048036038101906101039190610573565b6101b6565b005b6101126101c0565b60405161012092919061064b565b60405180910390f35b610143600480360381019061013e9190610517565b61025a565b005b61015f600480360381019061015a9190610573565b6102ea565b60405161016d92919061064b565b60405180910390f35b60008054905090565b6004818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600060s04905090565b8060008190555050565b60018060000154908060010180546101d790610744565b80601f016020809104026020016040519081016040528092919081815260200182805461020390610744565b80156102505780601f1061022557610100808354040283529160200191610250565b820191906000526020600020905b81548152906001019060200180831161023357829003601f168201915b5050505050905082565b600360405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906102c09291906103a6565b505050806004836040516102d49190610619565b9081526020016040518091039020819055505050565b600381815481106102fa57600080fd5b906000526020600020906002020160009150905080600001549080600101805461032390610744565b80601f016020809104026020016040519081016040528092919081815260200182805461034f90610744565b801561039c5780601f106103715761010080835404028352916020019161039c565b820191906000526020600020905b81548152906001019060200180831161037f57829003601f168201915b5050505050905082565b8280546103b290610744565b90600052602060002090601f0160209004810192826103d4576000855561041b565b82601f106103ed57805160ff191683800117855561041b565b8280016001018555821561041b579182015b8281111561041a5782518255916020019190600101906103ff565b5b509050610428919061042c565b5090565b5b8082111561044557600081600090555060010161042d565b5090565b600061045c610457846106a0565b61067b565b9050828152602081018484840111156104785761047761080a565b5b610483848285610702565b509392505050565b600082601f8301126104a05761049f610805565b5b81356104b0848260208601610449565b91505092915050565b6000813590506104c88161082a565b92915050565b6000602082840312156104e4576104e3610814565b5b600082013567ffffffffffffffff8111156105025761050161080f565b5b61050e8482850161048b565b91505092915050565b6000806040838503121561052e5761052d610814565b5b600083013567ffffffffffffffff81111561054c5761054b61080f565b5b6105588582860161048b565b9250506020610569858286016104b9565b9150509250929050565b60006020828403121561058957610588610814565b5b6000610597848285016104b9565b91505092915050565b60006105ab826106d1565b6105b581856106dc565b93506105c5818560208601610711565b6105ce81610819565b840191505092915050565b60006105e4826106d1565b6105ee81856106ed565b93506105fe818560208601610711565b80840191505092915050565b610613816106f8565b82525050565b600061062582846105d9565b915081905092915050565b6000602082019050610645600083018461060a565b92915050565b6000604082019050610660600083018561060a565b818103602083015261067281846105a0565b90509392505050565b6000610685610696565b90506106918282610776565b919050565b6000604051905090565b600067ffffffffffffffff8211156106bb576106ba6107d6565b5b6106c482610819565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561072f578082015181840152602081019050610714565b8381111561073e576000848401525b50505050565b6000600282049050600182168061075c57607f821691505b602082108114156107705761076f6107a7565b5b50919050565b61077f82610819565b810181811067ffffffffffffffff8211171561079e5761079d6107d6565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610833816106f8565b811461083e57600080fd5b5056fea2646970667358221220079cfcd879da8242388aa884a15410a6da976a42efc4aa759246f50c976a3faa64736f6c63430008070033",
  //   chainId: 1337,
  // };
  // const sentTxResponse = await wallet.sendTransaction(tx);
  // await sentTxResponse.wait(1);
  // console.log("signedTxResponse : ", sentTxResponse);

  /******** Interacting with Contracts in Ethersjs ********/
  const currentFavouriteNumber = await contract.retrieve();
  console.log("current Favourite Number : ", currentFavouriteNumber.toString());

  const transectionResponse = await contract.store("7");
  const transectionReceipt = await transectionResponse.wait(1);

  const updatedFavouriteNumber = await contract.retrieve();
  console.log("updated Favourite Number : ", updatedFavouriteNumber.toString());
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
